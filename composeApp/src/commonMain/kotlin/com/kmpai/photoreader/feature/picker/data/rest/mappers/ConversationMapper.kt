package com.kmpai.photoreader.feature.picker.data.rest.mappers

import com.kmpai.photoreader.feature.picker.data.rest.model.AIResponse
import com.kmpai.photoreader.feature.picker.data.rest.model.APIMessage
import com.kmpai.photoreader.feature.picker.domain.model.Conversation
import com.kmpai.photoreader.feature.picker.domain.model.Message
import com.kmpai.photoreader.feature.picker.domain.model.Role

const val ROLE = "user"

fun AIResponse.toConversation(filename: String): Conversation {
    val messages = mutableListOf<Message>()
    messages.add(Message(Role.ASSISTANT, this.choices[0].message.content))
    return Conversation(messages, filename)
}

fun AIResponse.toConversation(conversation: Conversation): Conversation {
    val messages = mutableListOf<Message>()
    messages.addAll(conversation.messages)
    messages.add(Message(Role.ASSISTANT, this.choices[0].message.content))
    return Conversation(messages, conversation.filename)
}

fun String.firstMessage() = APIMessage(ROLE, "Analyse an image${fileSuffix(this)}")

fun Conversation.toAPIMessages(): List<APIMessage> {
    val apiMessages =
        this.messages.map { APIMessage(it.role.customName, getContent(it, this.filename)) }.toMutableList()
    // the first message is generated by us, not the user, so it will not be shown to the user
    apiMessages.add(0, this.filename.firstMessage())
    return apiMessages
}

private fun fileSuffix(filename: String) = " {file: $filename}"

private fun getContent(it: Message, filename: String): String {
    return if (it.role == Role.ASSISTANT) {
        it.content
    } else {
        it.content + fileSuffix(filename)
    }
}


