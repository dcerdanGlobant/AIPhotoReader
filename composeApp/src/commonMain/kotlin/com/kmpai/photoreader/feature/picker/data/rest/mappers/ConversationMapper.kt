package com.kmpai.photoreader.feature.picker.data.rest.mappers

import com.kmpai.photoreader.feature.picker.data.rest.model.APIMessage
import com.kmpai.photoreader.feature.picker.data.rest.model.APIResponse
import com.kmpai.photoreader.feature.picker.domain.model.Conversation
import com.kmpai.photoreader.feature.picker.domain.model.Message
import com.kmpai.photoreader.feature.picker.domain.model.Role

fun Conversation.appendConversation(response: APIResponse): Conversation {
    val messages = this.messages.toMutableList()
    messages.add(Message(Role.ASSISTANT, response.choices[0].message.content))
    return copyWith(messages)
}

fun Conversation.toAPIMessages(languageCode: String): List<APIMessage> {
    val apiMessages =
        this.messages.map { APIMessage(it.role.customName, getContent(it, this.filename)) }.toMutableList()
    // the first message is generated by us, not the user, so it will not be shown to the user
    apiMessages.add(0, APIMessage(Role.USER.customName, "${getPromptText(languageCode)}${fileSuffix(this.filename)}"))
    return apiMessages
}

private fun getPromptText(languageCode: String): String {
    // default to English
    val useCode = languageCode.ifEmpty { "en" }
    return "Analyze using the language corresponding to the code $useCode, the image"
}

private fun fileSuffix(filename: String) = " {file: $filename}"

private fun getContent(it: Message, filename: String): String {
    return if (it.isFromAssistant) {
        it.content
    } else {
        it.content + fileSuffix(filename)
    }
}


